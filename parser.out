Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD
    ALTER
    ALTERB
    ARROBA
    CALL
    CASE
    COMMENT
    DIFFERENT
    DIV
    ELSE
    EQUAL
    ISTRUE
    MAQ
    MAQEQUAL
    MASTER
    MEQ
    MEQEQUAL
    MUL
    PRINTVALUES
    REPEAT
    SIGNAL
    SUB
    THEN
    UNTIL
    VIEWSIGNAL
    WHEN
    WHILE

Grammar

Rule 0     S' -> proc_list
Rule 1     proc_list -> proc
Rule 2     proc_list -> proc_list proc
Rule 3     proc -> PROC ID LPARENT sentence RPARENT SEMICOLON
Rule 4     sentence -> NEW ID LPARENT TYPE COMA INTEGER RPARENT SEMICOLON
Rule 5     sentence -> NEW ID LPARENT TYPE COMA BOOL RPARENT SEMICOLON
Rule 6     sentence -> VALUES LPARENT ID COMA INTEGER RPARENT SEMICOLON
Rule 7     sentence -> VALUES LPARENT ID COMA BOOL RPARENT SEMICOLON

Terminals, with rules where they appear

ADD                  : 
ALTER                : 
ALTERB               : 
ARROBA               : 
BOOL                 : 5 7
CALL                 : 
CASE                 : 
COMA                 : 4 5 6 7
COMMENT              : 
DIFFERENT            : 
DIV                  : 
ELSE                 : 
EQUAL                : 
ID                   : 3 4 5 6 7
INTEGER              : 4 6
ISTRUE               : 
LPARENT              : 3 4 5 6 7
MAQ                  : 
MAQEQUAL             : 
MASTER               : 
MEQ                  : 
MEQEQUAL             : 
MUL                  : 
NEW                  : 4 5
PRINTVALUES          : 
PROC                 : 3
REPEAT               : 
RPARENT              : 3 4 5 6 7
SEMICOLON            : 3 4 5 6 7
SIGNAL               : 
SUB                  : 
THEN                 : 
TYPE                 : 4 5
UNTIL                : 
VALUES               : 6 7
VIEWSIGNAL           : 
WHEN                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

proc                 : 1 2
proc_list            : 2 0
sentence             : 3

Parsing method: LALR

state 0

    (0) S' -> . proc_list
    (1) proc_list -> . proc
    (2) proc_list -> . proc_list proc
    (3) proc -> . PROC ID LPARENT sentence RPARENT SEMICOLON

    PROC            shift and go to state 3

    proc_list                      shift and go to state 1
    proc                           shift and go to state 2

state 1

    (0) S' -> proc_list .
    (2) proc_list -> proc_list . proc
    (3) proc -> . PROC ID LPARENT sentence RPARENT SEMICOLON

    PROC            shift and go to state 3

    proc                           shift and go to state 4

state 2

    (1) proc_list -> proc .

    PROC            reduce using rule 1 (proc_list -> proc .)
    $end            reduce using rule 1 (proc_list -> proc .)


state 3

    (3) proc -> PROC . ID LPARENT sentence RPARENT SEMICOLON

    ID              shift and go to state 5


state 4

    (2) proc_list -> proc_list proc .

    PROC            reduce using rule 2 (proc_list -> proc_list proc .)
    $end            reduce using rule 2 (proc_list -> proc_list proc .)


state 5

    (3) proc -> PROC ID . LPARENT sentence RPARENT SEMICOLON

    LPARENT         shift and go to state 6


state 6

    (3) proc -> PROC ID LPARENT . sentence RPARENT SEMICOLON
    (4) sentence -> . NEW ID LPARENT TYPE COMA INTEGER RPARENT SEMICOLON
    (5) sentence -> . NEW ID LPARENT TYPE COMA BOOL RPARENT SEMICOLON
    (6) sentence -> . VALUES LPARENT ID COMA INTEGER RPARENT SEMICOLON
    (7) sentence -> . VALUES LPARENT ID COMA BOOL RPARENT SEMICOLON

    NEW             shift and go to state 8
    VALUES          shift and go to state 9

    sentence                       shift and go to state 7

state 7

    (3) proc -> PROC ID LPARENT sentence . RPARENT SEMICOLON

    RPARENT         shift and go to state 10


state 8

    (4) sentence -> NEW . ID LPARENT TYPE COMA INTEGER RPARENT SEMICOLON
    (5) sentence -> NEW . ID LPARENT TYPE COMA BOOL RPARENT SEMICOLON

    ID              shift and go to state 11


state 9

    (6) sentence -> VALUES . LPARENT ID COMA INTEGER RPARENT SEMICOLON
    (7) sentence -> VALUES . LPARENT ID COMA BOOL RPARENT SEMICOLON

    LPARENT         shift and go to state 12


state 10

    (3) proc -> PROC ID LPARENT sentence RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 13


state 11

    (4) sentence -> NEW ID . LPARENT TYPE COMA INTEGER RPARENT SEMICOLON
    (5) sentence -> NEW ID . LPARENT TYPE COMA BOOL RPARENT SEMICOLON

    LPARENT         shift and go to state 14


state 12

    (6) sentence -> VALUES LPARENT . ID COMA INTEGER RPARENT SEMICOLON
    (7) sentence -> VALUES LPARENT . ID COMA BOOL RPARENT SEMICOLON

    ID              shift and go to state 15


state 13

    (3) proc -> PROC ID LPARENT sentence RPARENT SEMICOLON .

    PROC            reduce using rule 3 (proc -> PROC ID LPARENT sentence RPARENT SEMICOLON .)
    $end            reduce using rule 3 (proc -> PROC ID LPARENT sentence RPARENT SEMICOLON .)


state 14

    (4) sentence -> NEW ID LPARENT . TYPE COMA INTEGER RPARENT SEMICOLON
    (5) sentence -> NEW ID LPARENT . TYPE COMA BOOL RPARENT SEMICOLON

    TYPE            shift and go to state 16


state 15

    (6) sentence -> VALUES LPARENT ID . COMA INTEGER RPARENT SEMICOLON
    (7) sentence -> VALUES LPARENT ID . COMA BOOL RPARENT SEMICOLON

    COMA            shift and go to state 17


state 16

    (4) sentence -> NEW ID LPARENT TYPE . COMA INTEGER RPARENT SEMICOLON
    (5) sentence -> NEW ID LPARENT TYPE . COMA BOOL RPARENT SEMICOLON

    COMA            shift and go to state 18


state 17

    (6) sentence -> VALUES LPARENT ID COMA . INTEGER RPARENT SEMICOLON
    (7) sentence -> VALUES LPARENT ID COMA . BOOL RPARENT SEMICOLON

    INTEGER         shift and go to state 19
    BOOL            shift and go to state 20


state 18

    (4) sentence -> NEW ID LPARENT TYPE COMA . INTEGER RPARENT SEMICOLON
    (5) sentence -> NEW ID LPARENT TYPE COMA . BOOL RPARENT SEMICOLON

    INTEGER         shift and go to state 21
    BOOL            shift and go to state 22


state 19

    (6) sentence -> VALUES LPARENT ID COMA INTEGER . RPARENT SEMICOLON

    RPARENT         shift and go to state 23


state 20

    (7) sentence -> VALUES LPARENT ID COMA BOOL . RPARENT SEMICOLON

    RPARENT         shift and go to state 24


state 21

    (4) sentence -> NEW ID LPARENT TYPE COMA INTEGER . RPARENT SEMICOLON

    RPARENT         shift and go to state 25


state 22

    (5) sentence -> NEW ID LPARENT TYPE COMA BOOL . RPARENT SEMICOLON

    RPARENT         shift and go to state 26


state 23

    (6) sentence -> VALUES LPARENT ID COMA INTEGER RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 27


state 24

    (7) sentence -> VALUES LPARENT ID COMA BOOL RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 28


state 25

    (4) sentence -> NEW ID LPARENT TYPE COMA INTEGER RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 29


state 26

    (5) sentence -> NEW ID LPARENT TYPE COMA BOOL RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 30


state 27

    (6) sentence -> VALUES LPARENT ID COMA INTEGER RPARENT SEMICOLON .

    RPARENT         reduce using rule 6 (sentence -> VALUES LPARENT ID COMA INTEGER RPARENT SEMICOLON .)


state 28

    (7) sentence -> VALUES LPARENT ID COMA BOOL RPARENT SEMICOLON .

    RPARENT         reduce using rule 7 (sentence -> VALUES LPARENT ID COMA BOOL RPARENT SEMICOLON .)


state 29

    (4) sentence -> NEW ID LPARENT TYPE COMA INTEGER RPARENT SEMICOLON .

    RPARENT         reduce using rule 4 (sentence -> NEW ID LPARENT TYPE COMA INTEGER RPARENT SEMICOLON .)


state 30

    (5) sentence -> NEW ID LPARENT TYPE COMA BOOL RPARENT SEMICOLON .

    RPARENT         reduce using rule 5 (sentence -> NEW ID LPARENT TYPE COMA BOOL RPARENT SEMICOLON .)

